// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransportTicketingNetwork.Database;

namespace TransportTicketingNetwork.Database.Migrations
{
    [DbContext(typeof(TransportTicketingNetworkDbContext))]
    partial class TransportTicketingNetworkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EffectiveDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpireDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'2080-01-01'");

                    b.Property<bool>("IsBlocked");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<byte>("UserType");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers","usm");
                });

            modelBuilder.Entity("Common.Models.ApplicationUserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<DateTime>("EffectiveDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpireDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'2080-01-01'");

                    b.Property<string>("SessionHash")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SessionHash");

                    b.ToTable("ApplicationUserTokens","usm");
                });

            modelBuilder.Entity("Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Users","usm");
                });

            modelBuilder.Entity("Modules.Main.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusName");

                    b.Property<string>("BusNumber");

                    b.Property<int?>("BusScheduleId");

                    b.Property<string>("BusType");

                    b.Property<string>("Description");

                    b.Property<int>("NoSeats");

                    b.Property<string>("SubRouteId");

                    b.Property<int?>("SubRouteId1");

                    b.HasKey("Id");

                    b.HasIndex("BusScheduleId");

                    b.HasIndex("SubRouteId1");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Modules.Main.Models.BusSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Destination");

                    b.Property<string>("EndBusStopId");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("StartBusStopId");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("StartingPoint");

                    b.Property<string>("TotalDuration");

                    b.HasKey("Id");

                    b.HasIndex("EndBusStopId");

                    b.HasIndex("StartBusStopId");

                    b.ToTable("BusSchedules");
                });

            modelBuilder.Entity("Modules.Main.Models.BusStop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusStopName");

                    b.HasKey("Id");

                    b.ToTable("BusStop");
                });

            modelBuilder.Entity("Modules.Main.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("Distance");

                    b.Property<string>("StartBusStopId");

                    b.HasKey("Id");

                    b.HasIndex("StartBusStopId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Modules.Main.Models.SubRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Distance");

                    b.Property<string>("EndBusStopId");

                    b.Property<int>("Fare");

                    b.Property<string>("RouteId");

                    b.Property<int?>("RouteId1");

                    b.HasKey("Id");

                    b.HasIndex("EndBusStopId");

                    b.HasIndex("RouteId1");

                    b.ToTable("SubRoute");
                });

            modelBuilder.Entity("Common.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("Common.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserTokens")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Common.Models.User", b =>
                {
                    b.HasOne("Common.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("User")
                        .HasForeignKey("Common.Models.User", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modules.Main.Models.Bus", b =>
                {
                    b.HasOne("Modules.Main.Models.BusSchedule")
                        .WithMany("AllocatedBus")
                        .HasForeignKey("BusScheduleId");

                    b.HasOne("Modules.Main.Models.SubRoute", "SubRoute")
                        .WithMany()
                        .HasForeignKey("SubRouteId1");
                });

            modelBuilder.Entity("Modules.Main.Models.BusSchedule", b =>
                {
                    b.HasOne("Modules.Main.Models.BusStop", "EndBusStop")
                        .WithMany()
                        .HasForeignKey("EndBusStopId");

                    b.HasOne("Modules.Main.Models.BusStop", "StartBusStop")
                        .WithMany()
                        .HasForeignKey("StartBusStopId");
                });

            modelBuilder.Entity("Modules.Main.Models.Route", b =>
                {
                    b.HasOne("Modules.Main.Models.BusStop", "StartBusStop")
                        .WithMany()
                        .HasForeignKey("StartBusStopId");
                });

            modelBuilder.Entity("Modules.Main.Models.SubRoute", b =>
                {
                    b.HasOne("Modules.Main.Models.BusStop", "EndBusStop")
                        .WithMany()
                        .HasForeignKey("EndBusStopId");

                    b.HasOne("Modules.Main.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId1");
                });
#pragma warning restore 612, 618
        }
    }
}
